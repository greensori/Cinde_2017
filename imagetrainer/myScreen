import cv2, psutil, time
import numpy as np

font = cv2.FONT_HERSHEY_SIMPLEX

class myScreen:
    def __init__(self, **kwards):
        self.path = kwards.get('filePath', None)
        capNo = kwards.get('capNo', 0)
        if self.path:
            self.frame = cv2.imread(self.path)
            print ('read image file')
        else:
            self.frame = cv2.VideoCapture(capNo)
            print ('open camera')
    def getFrame(self):
        ref, self.frame = (self.cap).read()
        '''
        if cap.isOpened():
            print (cap.get(3))
            print (cap.get(4))
            ret, frame = cap.read()
            if ret:
                return frame
        else:
            frame = self.img
            cv2.imshow('dst',frame)
            if cv2.waitKey(0) & 0xff == 27:
                cv2.destroyAllWindows()
                '''
    def myCanny(self):
        cannyFrame = self.frame
        cannyFrame = cv2.cvtColor(cannyFrame, cv2.COLOR_BGR2GRAY)
        cannyFrame = cv2.GaussianBlur(cannyFrame, (5, 5), 0)
        cannyFrame = cv2.Canny(cannyFrame, 10, 70)
        ret, mask = cv2.threshold(cannyFrame, 70, 255, cv2.THRESH_BINARY_INV)
        cv2.imshow('Gausian',mask)
        return
    def myContour(self):
        cntFrame = self.frame
        cntFrame = cv2.cvtColor(cntFrame, cv2.COLOR_BGR2GRAY)
        thresh = cv2.adaptiveThreshold(cntFrame,255,1,1,11,2)
        __, contours,hierarchy = cv2.findContours(thresh, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
        for cnt in contours:
            if len(cnt) > 200:
                x,y,h,w = cv2.boundingRect(cnt)
                cv2.rectangle(cntFrame,(x,y),(x+w,y+h),(0,255,0),2)
        cv2.imshow('cnts', cntFrame)
        return
    def myHarris(self):
        harrisFrame = self.frame
        nframe = cv2.cvtColor(harrisFrame, cv2.COLOR_BGR2GRAY)
        nframe = np.float32(nframe)
        dst = cv2.cornerHarris(nframe, 2, 3, 0.04)
        dst = cv2.dilate(dst,None)
        harrisFrame[dst>0.01*dst.max()] = [0,50,0]
        cv2.imshow('Harris', harrisFrame)
        return
    def mySIFT(self):
        siftFrame = self.frame
        siftFrame = cv2.cvtColor(siftFrame, cv2.COLOR_BGR2GRAY)
        sift = cv2.SIFT()
        kp = sift.detect(siftFrame,None)
        siftFrame=cv2.drawKeypoints(siftFrame,kp,flags=cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
        cv2.imshow('SIFT', siftFrame)
        return
    def myGoodFeaturesToTrack(self):
        count=0
        goodfeatureFrame = self.frame
        goodfeatureFrame = cv2.cvtColor(goodfeatureFrame, cv2.COLOR_BGR2GRAY)
        corners = cv2.goodFeaturesToTrack(goodfeatureFrame,10,0.01,10)
        corners = np.int0(corners)
        emptyFrame = np.zeros((int((self.cap).get(4)), int((self.cap).get(3)), 3), np.uint8)
        goodfeatureFrame = emptyFrame
        for i in corners:
            count = count + 1
            x, y = i.ravel()
            cv2.putText(goodfeatureFrame, ('Feature : %d' %count), (x, y), font, 0.6, (0, 125, 0), 2)
            cv2.circle(goodfeatureFrame, (x, y), 5, 255, 1)
        cv2.imshow('goodFeatures', goodfeatureFrame)
        return
    def showScreen(self):
        rawFrame = self.frame
        cv2.imshow('dst',rawFrame)
    def cvEnd(self):
        (self.frame).release()
        cv2.destroyAllWindows()


if __name__ == '__main__':
    aa = myScreen()
    stime = time.time()
    while True:
        print('complete in {} seconds'.format(time.time() - stime))
        print('CPU usage : %s' %str(psutil.cpu_percent()))
        print('Memory usage : %s' &str(psutil.virtual_memory().used)
        stime = time.time()
        aa.getFrame()
        aa.myCanny()
        #aa.mySIFT()
        aa.myContour()
        aa.myGoodFeaturesToTrack()
        aa.myHarris()
        if cv2.waitKey(25) & 0xff == ord('q'):
            aa.cvEnd()
