void dvastepping() {
  //mov 3stepping case
  if (worker == 'notin') {
  //stepping moving if remain int remainpulse
  //after stepping moving, totalpulse - pullse
  //while (rp < 0)
  
  for (i = 0; i < 3; i++) {
  digitalWrite(ENA[i],LOW);
  digitalWrite(ENA[i], HIGH);  
  }

 // [7 - '3'] [4 - '3'] ['1' - 3] [6 - '2'] [4 - '3']
  // mov 2stepping case
  while (notin) {
    digitalWrite(STEP[0], HIGH):
    digitalWrite(STEP[1], HIGH):
    delayMicroseconds(pulse[1]);
    digitalWrite(STEP[1], LOW);
    digitalWrite(STEP[1], HIGH);    
    delayMicroseconds(pulsegap[0]); 
    digitalWrite(STEP[0], LOW);
    digitalWrite(STEP[0], HIGH);
    delayMicroseconds(pulse[1] - pulsegap[1]);
    digitalWrite(STEP[1], LOW);
    digitalWrite(STEP[1], HIGH);  
  }
}


void dvacalculator(int a, int b) {
      if (pulsegap[b] > 0) {
        delayMicroseconds(pulsegab[b]);
        pulsegap[b] = 0;
      } else if (pulsegap[a] > pulse[b]) {
        pulsegap[a] = (pulsegap[a] - pulse[b]);
        pulsegap[a] -= pulse[b]
        steptimer -= pulse[b];
        delayMicroseconds(pulse[b]);
        digitalWrite(STEP[b], LOW);
        digitalWrite(STEP[b], HIGH);
      } else if (pulsegap[a] < pulse[b]) {
        pulsegap[b] = pulse[b] - pulsegap[a]
        delayMicroseconds (pulsegap[b]);
        digitalWrite(STEP[a], LOW);
        digitalWrite(STEP[a], HIGH);
      } else if (pulsegap[a] == pulse[b]) {
        delayMicroseconds(pulsegap[b]);
        digitalWrite(STEP[a], LOW);
        digitalWrite(STEP[b], LOW);
        digitalWrite(STEP[a], HIGH);
        digitalWrite(STEP[b], HIGH);  
        pulsegap[a] = pulse[a] - pulse[b];
      }
}
