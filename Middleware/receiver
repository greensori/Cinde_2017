from Tkinter import *
import cv2
import numpy as np
from matplotlib import pyplot as plt
import time
from PIL import ImageGrab
import serial

font = cv2.FONT_HERSHEY_SIMPLEX

tagword = ['ax', 'ay', 'az', 'gx', 'gy', 'gz', 'mx', 'my', 'mz', 'end']
resultpt = np.zeros((10,), dtype = np.int)  ## to find tagword position
agm = np.zeros((9,), dtype = np.int) ## sensor values savings on here
agm_mean = np.zeros((9, 50), dtype = np.int)

size = [300, 300, 500, 500]
axline = [50, 100, 150, 100]
ayline = [25, 50, 25, 150]
azline = [50, 25, 150, 25]

gyrocir = [50, 100, 100]


meancount = 0
tempint = 10
ayinfo = [tempint, (ayline[0] - 10), int(np.mean(ayline[3] - ayline[1]))]
azinfo = [tempint, int(np.mean(azline[2] - azline[0])), (azline[1] - 10)]
gyroinfo = [100, 100, 50]

  
def going():
    while True:
        screen = np.array(ImageGrab.grab(bbox = size))
        accelometer(3, 1, -1)
        cv2.line(screen, (axline[0], axline[1]), (axline[2], axline[3]), (125, 0, 0), 2)
        cv2.line(screen, (ayline[0], ayline[1]), (ayline[2], ayline[3]), (125, 0, 0), 2)
        cv2.line(screen, (azline[0], azline[1]), (azline[2], azline[3]), (125, 0, 0), 2)
        cv2.line(screen, ((ayline[0] - 5), ayline[1]), ((ayline[0]), ayline[1]), (125, 0, 0), 2)
        cv2.line(screen, ((ayline[0] - 5), ayline[3]), ((ayline[0]), ayline[3]), (125, 0, 0), 2)
        cv2.line(screen, (azline[0], (azline[1] - 5)), ((azline[0]), azline[1]), (125, 0, 0), 2)
        cv2.line(screen, (azline[2], (azline[3] - 5)), ((azline[2]), azline[3]), (125, 0, 0), 2)
        cv2.putText(screen, '[ %s ]' %ayinfo[0], (ayinfo[1], ayinfo[2]), font, 0.6, (0, 0, 0), 1)
        cv2.putText(screen, '[ %s ]' %azinfo[0], (azinfo[1], azinfo[2]), font, 0.6, (0, 0, 0), 1)
        ##drawing gyroscope information
        gyroscope(3, 1, -20)
        cv2.circle(screen, (gyrocir[1], gyrocir[2]), gyrocir[0], (125, 0, 0), 1)
        cv2.circle(screen, (gyroinfo[0], gyroinfo[1]), gyroinfo[2], (0, 125, 0), 1)
        cv2.imshow('title', screen)
        if cv2.waitKey(25) & 0xFF == ord('q'):
            cv2.destroyAllWindows()
            break


def indata():
    global agm
    global resultpt
    

def accelometer(x, y, z):
    if x <> 0:
        for i in range(x):
            if axline[0] <= 50 and axline[1] < 150 and axline[1] >= 50:
                axline[1] += 1
                axline[3] -= 1
            elif axline[1] >= 150 and axline[0] < 150 and axline[0] >= 50:
                axline[0] += 1
                axline[2] -= 1
            elif axline[0] >= 150 and axline[1] <= 150 and axline[1] > 50:
                axline[1] -= 1
                axline[3] += 1
            elif axline[1] <= 50 and axline[0] <= 150 and axline[0] > 50:
                axline[0] -= 1
                axline[2] += 1            
    if y <> 0:
        ayinfo[0] += y
    if z <> 0:
        azinfo[0] += z


#getting 50 times of values from gy91
def averagevalue():
    #after enter proc, to gives every
    global meancount
    if meancount < 50:
        count = 0
        for i in agm:
            agm_mean[meancount][count]
            count += 1
        meancount += 1
    
    
#maybe getting over 30000 value
#must to find average values
def gyroscope(x, y, z):
    if x <> 0:
        for i in range(x):
            gyroinfo[0] += 1
    if y <> 0:
        for i in range(y):
            gyroinfo[1] += 1
    if z <> 0:
        for i in range(z):
            gyroinfo[2] += 1

    
def magneticfield():
    return


def receiver():
    return
            
going()

