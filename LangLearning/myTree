from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
import numpy as np


#language settings
#[SVO types, emotional types, process link, previous lang step
#    total stacked lang step, 
#rule input

#this proc must return return word type



'''
SOV, result of image  process
emotional types, was defined by stat of device's temperature, gyroscope value
emotion stat, if device listne specific word then this stat will be changing
process link
previous lang step, based 0, if communications are longer then this step will +1

'''


def ReceveWord(rxWord):
    
    return


def emotionType(**kwards):
    gyro = kwards.get('gyro', 1)
    accel = kwards.get('aacel', 1)
    magnet = kwards.get('magnet', 1)
    return


class mytest:
    def __init__(self, personalID):
        return
    def abc(self):
        return

def TreeClassify():
    x = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [1, 2], [1, 2]]
    y = [0, 1, 'hello', 3, 4, 1, 'nice']


    clf = tree.DecisionTreeClassifier()
    clf = clf.fit(x, y)


    print clf.predict([[1, 1], [2, 2]])
    print clf.predict_proba([[1, 1], [3, 3]])


def randomTree():
    print 'randomforest'
    x = [[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [1, 2], [1, 2]]
    y = [0, 1, 'hello', 3, 4, 1, 'nice']
    clf = RandomForestClassifier()
    clf.fit(x, y)
    print clf.predict([[2, 2], [1, 1]])
    print clf.feature_importances_


randomTree()

