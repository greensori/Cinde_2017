/*
 * hand control script NEW 2018.2.2
 * just working with control arm parts
 * \working with nano board
 */

#include <Servo.h>

#define totalServo 7

#define SetCurrentStep (ch - 33)

#define pwmResult (700 + (ch * 5)) 

enum RangePWM{
  mimPwm = 700,
  maxPwm = 1500
}; 
// map(input, 0, 180, RangePWM[0], RangePwm[1]);

enum myenum{
  aa = 1,
  bb,
  cc,
  dd  
};

enum servoNumber{
  
};


/*
 * woring min values of pwm
 * delaymocroseconds(min(ctl.remainpwm))
 */
struct CtlServo{
  const int pinNo[totalServo] = {1, 2, 3, 4, 5, 6, 7};
  unsigned pt[totalServo];
  unsigned pwm[totalServo];  //saving seperate ServoPwm
  unsigned remainPwm[totalServo]; //remain values ofpwm
  int workPhase[totalServo]; // if this value is 1, then working
};

struct CtlServo myCtl;

Servo servoPitch, servoYaw, servoRoll, servoElbow, servoF1, servoF2, servoF3;

//this works with SetCurrentStep
// this conclusion to movement of seperate step
int currentServo;

//this recevign serial information
char ch;

int i;


void setup() {
  Serial.begin(19200);
  servoPitch.attach(myCtl.pinNo[0]);
  servoYaw.attach(myCtl.pinNo[1]);
  servoRoll.attach(myCtl.pinNo[2]);
  servoElbow.attach(myCtl.pinNo[3]);
  servoF1.attach(myCtl.pinNo[4]);
  servoF2.attach(myCtl.pinNo[5]);
  servoF3.attach(myCtl.pinNo[6]);
}

/*
 * 1. setting currentServo working
 * 2. seperate steps working just plus 1step
 * *** how to workign this script?
 * 1. setiing target pwm -> myClt.pt[currentServo] = ReceivePwm;
 * 2. workign with pwm delay ->
 * delayMicroseconds(myClt.pwm[currentServo]);
 * servoYaw.write(myClt.pt[currentServo] + 1); => must making this proc
 * servo.writeMicroseconds(uS);   values 700 to 2300 range
 */

void loop() {
  int a;
  a = testOperate(1200, 1);
  a = testOperate(1200, -1);
  /*
  if (Serial.available() > 0) {
    ch = Serial.read();
    if (ch >= 33 && ch <= 42) {
      //Setting current servo values
      cerrentServo = SetCurrentStep;
    } else if (ch > 42) {
      //set current servo pwm
      myClt.pwm[currentServo] = pwmResult;   
    }
    //servoPitch.write(myClt.pt[currentServo]);
  }
  */
}

//working with servoPitch
int testOperate(int delaytimer, int DIR) {
  if (DIR == 1) {
    Serial.println ("working positive direction");
    for (i = 700; i <= 2300; i++) {
      delayMicroseconds(delaytimer);
      servoPitch.writeMicroseconds(i); //700 to 2300
    }
    return (-1); //positioce direction
  } else if (DIR == -1) {
    Serial.println ("working negative direction");
    for (i = 2300; i >= 700; i--) {
      delayMicroseconds(delaytimer);
      servoPitch.writeMicroseconds(i); //700 to 2300
    }
    return (1);
  }
}


int operate() {
  for (i = 0; i < totalServo; i++) {
    if (myCtl.pt[i] > 0) {
      myCtl.pwm[i];
    }
  }
}

//setting seperate pwm with servos

void tempworking() {
  /*
   * find the least pwm meter
   * adjust pinNo[i] after delay
   * when enter this proc must adjust pwm
   * working dleay (pwm) after pt = pt  + pwm
   */

  delayMicroseconds(10);
  for (i = 0; i < totalServo; i++) {
    servoPitch.writeMicroseconds(myCtl.pinNo[0]);
    servoYaw.writeMicroseconds(myCtl.pinNo[1]);
    servoRoll.writeMicroseconds(myCtl.pinNo[2]);
    servoElbow.writeMicroseconds(myCtl.pinNo[3]);
    servoF1.writeMicroseconds(myCtl.pinNo[4]);
    servoF2.writeMicroseconds(myCtl.pinNo[5]);
    servoF3.writeMicroseconds(myCtl.pinNo[6]);
   }
}

/*
 * totalServo
 * for (i = 0; i < totalServo; i++) {
 * 
 */
