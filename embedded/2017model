#include "cinde.h"

#include <Servo.h>

#define sumstep 2

#define setpwm (570 + (ch * 4)) //setting stepping values, notusing

#define resultPwm (totalPwm[0] - totalPwm[1])

#define workingtime 20000

#define setDIR (ch - 34)

cinde mycinde(sumstep);

Servo myservo;

const int ENA[sumstep] = {1, 4};
const int STEP[sumstep] = {2, 5};
const int DIR[sumstep] = {3, 6};

const int potentionumber[sumstep] = {1, 2};

int potentiostep = 0; //savings potentiometers value
//int range = 32767

int pwm[sumstep]; //temporaily using
int initPwm[sumstep]; //storage inital pwm values

/*
 * remain_Pwm <- totalPwm[0]
 * remain_Worker <- totalPwm[1]
 * pwm_Worker <- totalPwm[2]
 */
int totalPwm[3]; 

/*
int totalPwm[0];
int totalPwm[2]; //working worh totalPwm[2]
int totalPwm[1];

*/



int currentstep; //saving stepper settings
int stepend; //tag for step end phase

char ch;

int count;

int i; //using in for action

//focus on 


void setup() {
  Serial.begin(19200);
  myservo.attach(9);
}

//1 ~ : 48 ~ stepper number
//43.44.45 = + , - , setting accelation
//35.36 = # $ , setting direction 
//37 ~ 42 = setting stepping numbers
// A ~ = 65 ~
// a ~ = 97 ~
/*
 * operation starting with 'space'signal
 * this signal must refill totalPwm[0] to 20000
 * while totalPwm[0] values over 0, then stepper operation
 * 1. must making intercept signals
 * 2. when totalPwm[0] is under 10000 then send to serial signal to pc
 * 3. getting potentiometer signal
 */
void loop() {
  if(Serial.available()) {
    ch = Serial.read();
    stepend = 1;
    if (ch >= 37 && ch <= 42) {
      currentstep = (ch - 37);
      mycinde.stepstatus(ENA[currentstep], DIR[currentstep], STEP[currentstep]);
      /* setting stepping numbers
       * this loop changes only stepping setting numbers
       * range is 37 to 42 <- % & ' ( ) *
       * this loop is contain enable pin to low and step is high
       */
      /*
       * Setting current step checking complete : 17.12.18
      Serial.print ("setting step : ");
      Serial.println (currentstep);
      */
    } else if (ch >= 48 && ch <= 59) {
      pwm[currentstep] = mycinde.asciino(ch, STEP[currentstep]);
      initPwm[currentstep] = pwm[currentstep];
      /* working great checking complete : 17.12.18
      Serial.print ("step speed setting :");
      Serial.print (currentstep);
      Serial.print ("Speed latency");
      Serial.println (pwm[currentstep]);
      */
      /*when ch value is 1 ~ 0, then changing pwm values
      comlete this section
      */
    } else if (ch == 35 || ch == 36) {
      mycinde.statuschanger(setDIR);
      /* 35, 36 <- # $
       *  this is complete, changing direction works fine
       * setDIR = (ch - 34)
       */       
    } else if (ch == 32) {
      //if enter spacekey then pwm refill
      totalPwm[0] = 20000;
      /*
      count = 0;
      workingcount[0] = 0;
      workingcount[1] = 0;
      */
    }
    totalPwm[0] = minPwm();
  } else {
    if (totalPwm[0] > 0) {
      totalPwm[0] = minPwm(); 
      count++;
      /*
      Serial.print ("Working :");
      Serial.print (count);
      Serial.print ("  totalPwm[0]: ");
      Serial.println (totalPwm[0]);
      */
    } else if (totalPwm[0] <= 0 && stepend == 1) {
      stepend = 0;
      Serial.println ("working end");
      for (i = 0; i < sumstep; i++) {
        mycinde.stepstatus(ENA[i], DIR[i], STEP[i]);
        mycinde.statuschanger(0);
      }
    }
  } //Serial.available end
}


int settingstep() {
    
}

int minPwm() {
  /*
   * this procedure is now return totalPwm[0] - totalPwm[2]
   * when totalPwm[2] value is over 100 then doing analog read
   * potentiostep = potentiometer values
   */
  totalPwm[2] = pwm[0];
  for (i = 1; i < sumstep; i++) {
    totalPwm[2] = min(pwm[i], totalPwm[2]);
  }
  totalPwm[1] = totalPwm[2];
  while (totalPwm[2] > 100) {
    totalPwm[2] = mycinde.analogReader(totalPwm[2], potentionumber[potentiostep]);
    potentiostep ++;
    if (potentiostep >= sumstep) {
      potentiostep = 0;
    }
  }
  delayMicroseconds(totalPwm[2]);
  for (i = 0; i < sumstep; i++) {
    pwm[i] = (pwm[i] - totalPwm[1]);
    //if (pwm[i] <= 0 && totalPwm[1] > 100) {
    if (pwm[i] <= 0) {
      pwm[i] = initPwm[i];
      mycinde.stepwork(STEP[i]); //step work
      /* workiig great
       * workingcount[i]++;
      Serial.print ("stepwork");
      Serial.print (i);
      Serial.print ("_workingcount");
      Serial.println (workingcount[i]);
      */
    }
  }
  return resultPwm;
}
